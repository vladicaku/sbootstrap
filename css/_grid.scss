body {
  margin: 0;
  padding: 0;
}

.container {
  margin: auto;
  overflow: hidden;

  @media all and (max-width: $screen-xs-max) {
    width: 100%;
  }

  @media all and (min-width: $screen-sm-min) {
    width: $container-sm;
  }

  @media all and (min-width: $screen-md-min) {
    width: $container-md;
  }

  @media all and (min-width: $screen-lg-min) {
    width: $container-lg;
  }
}

.row:before, .row:after {
  content:"";
  display: block ;
  clear:both;
}

.row {
  overflow: hidden;
  margin-bottom: $row-distance;
}

// Extending placeholder in different media queries is not supported
// We will use mixin
%col {
  float: left;
  padding: 0 $column-gutter;
  min-height: 1px;
  box-sizing: border-box;
}

@mixin col() {
  float: left;
  padding: 0 $column-gutter;
  min-height: 1px;
  box-sizing: border-box;
}

@mixin make-grid($class) {
  @for $i from 1 through $grid-columns {
    .col-#{$class}-#{$i} {
      @include col();
      width: percentage($i * $column-width);
    }
  }
}

@mixin make-hidden($class) {
  .hidden-#{$class} {
    display: none !important;
  }
}

/* Generate col classes */
// The XS grid should work for all screen sizes
//@media all and (max-width: $screen-xs-max) {
@include make-grid(xs);
//}

@media all and (min-width: $screen-sm-min) {
  @include make-grid(sm);
}

@media all and (min-width: $screen-md-min) {
  @include make-grid(md);
}

@media all and (min-width: $screen-lg-min) {
  @include make-grid(lg);
}

/* Generate hidden classes */
@media all and (max-width: $screen-xs-max) {
  @include make-hidden(xs)
}

@media all and (min-width: $screen-sm-min) {
  @include make-hidden(sm)
}

@media all and (min-width: $screen-md-min) {
  @include make-hidden(md)
}

@media all and (min-width: $screen-lg-min) {
  @include make-hidden(lg)
}

/* Default topology margins */
.topology {
  margin: 0px !important;
  margin-bottom: 15px !important;
}

h1, h2, h3, h4, h5, p {
  @extend .topology;
}

/* Some useful classes */
.pull-left {
  float: left;
}

.pull-right {
  float: right;
}

.center-block {
  margin: auto;
}

/* Text */
.text-center {
  text-align: center;
}

.text-left {
  text-align: left;
}

.text-right {
  text-align: right;
}

.text-justified {
  text-align: justify;
}

.text-lowercase {
  text-transform: lowercase;
}

.text-uppercase {
  text-transform: uppercase;
}

.text-capitalize {
  text-transform: capitalize;
}

.text-small {
  font-size: small;
}

.text-smaller {
  font-size: smaller;
}

.text-x-small {
  font-size: x-small;
}

.text-xx-small {
  font-size: xx-small;
}

.text-large {
  font-size: large;
}

.text-larger {
  font-size: larger;
}

.text-x-large {
  font-size: x-large;
}

.text-xx-large {
  font-size: xx-large;
}

.text-indent {
  text-indent: 25px;
}

.text-bold {
  font-weight: bold;
}

.text-italic {
  font-style: italic;
}

/* Responsive image */
.img-responsive {
  max-width: 100%;
  display:block;
  height: auto;
}